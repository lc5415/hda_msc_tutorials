stopifnot(all(dim(versicolor)==c(50,5)))
# your code here
setosa$Output = 1
versicolor$Output = -1
# result should add a column to each of setosa and versicolor
stopifnot(all(dim(setosa)==c(50,6)))
stopifnot(all(dim(versicolor)==c(50,6)))
# your code here
dataset = rbind(setosa, versicolor)
tr.index = sample(100, 80)
tst.index = rownames(dataset)[!rownames(dataset) %in% tr.index]
training.data = dataset[tr.index,]
test.data = dataset[tst.index,]
# resulting dataframes (one each for training and test data) should have
# the appropriate sizes
stopifnot(all(dim(training.data)==c(80,6)))
stopifnot(all(dim(test.data)==c(20,6)))
# Creates all possible combinations of attributes
# attribute.combinations is a list whose elements are lists of attributes
attribute.names <- colnames(iris)[1:4]
attribute.combinations <- do.call(
c,
lapply(1:4, function(i) as.list(data.frame(combn(attribute.names, i))))
)
names(attribute.combinations) <- 1:length(attribute.combinations)
return.predictions <- function(attribute.names, training.data, test.data) {
# Format training and test data (as matrices)
### your code here
X.train = as.matrix(training.data[,attribute.names])
X.test = as.matrix(test.data[,attribute.names])
y.train = as.matrix(training.data[,"Output"])
# Calculate optimal weights
### your code here
params = inv(t(X.train)%*%X.train)%*%t(X.train)%*%y
# Make predictions
### your code here
predictions = X.test %*% params
predictions
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
print(paste("For params: ",att,"\n MSE: ",
return.mse(return.predictions(att, training.data,test.data),
test.data)))
}
return.predictions("Setosa.Length", training.data,test.data)
return.predictions("Sepal.Length", training.data,test.data)
ones(3)
integer(3)
integer(3) = 1
# Format training and test data (as matrices)
### your code here
attribute.names = "Sepal.Length"
X.train = as.matrix(training.data[,attribute.names])
X.test = as.matrix(test.data[,attribute.names])
X.train = cbind(matrix(1,nrow(X.train),m = 1), X.train)
?matrix
# Format training and test data (as matrices)
### your code here
attribute.names = "Sepal.Length"
X.train = as.matrix(training.data[,attribute.names])
X.test = as.matrix(test.data[,attribute.names])
X.train = cbind(matrix(1,nrow(X.train)), X.train)
X.test = cbind(matrix(1,nrow(X.test)), X.test)
y.train = as.matrix(training.data[,"Output"])
# Calculate optimal weights
### your code here
params = inv(t(X.train)%*%X.train)%*%t(X.train)%*%y
# Format training and test data (as matrices)
### your code here
attribute.names = "Sepal.Length"
X.train = as.matrix(training.data[,attribute.names])
X.test = as.matrix(test.data[,attribute.names])
X.train = cbind(matrix(1,nrow(X.train)), X.train)
X.test = cbind(matrix(1,nrow(X.test)), X.test)
y.train = as.matrix(training.data[,"Output"])
# Calculate optimal weights
### your code here
params = inv(t(X.train)%*%X.train)%*%t(X.train)%*%y.train
# Make predictions
### your code here
predictions = X.test %*% params
predictions
knitr::opts_chunk$set(echo = TRUE)
# Load the iris dataset
library(datasets)
library(matlib)
data(iris)
iris$Species <- as.character(iris$Species)
library(dplyr)
# Calculate the mean of each attribute
print(colMeans(select(iris, -Species)))
# Calculate the standard deviation of each attribute
print(apply(select(iris, -Species), 2, sd))
# Calculate the minimum of each attribute
print(apply(select(iris, -Species), 2, min))
# Calculate the maximum of each attribute
print(apply(select(iris, -Species), 2, max))
library(ggplot2)
library(GGally)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species))+geom_point()
ggplot(iris, aes(Species, Sepal.Length))+geom_boxplot()
# your code here
setosa = iris %>% filter(Species == "setosa")
versicolor = iris %>% filter(Species == "versicolor")
# result should be two dataframes (one for each for setosa, versicolor classes),
# each with dim (50,5) - 4 attributes plus column for class
stopifnot(all(dim(setosa)==c(50,5)))
stopifnot(all(dim(versicolor)==c(50,5)))
# your code here
setosa$Output = 1
versicolor$Output = -1
# result should add a column to each of setosa and versicolor
stopifnot(all(dim(setosa)==c(50,6)))
stopifnot(all(dim(versicolor)==c(50,6)))
# your code here
dataset = rbind(setosa, versicolor)
tr.index = sample(100, 80)
tst.index = rownames(dataset)[!rownames(dataset) %in% tr.index]
training.data = dataset[tr.index,]
test.data = dataset[tst.index,]
# resulting dataframes (one each for training and test data) should have
# the appropriate sizes
stopifnot(all(dim(training.data)==c(80,6)))
stopifnot(all(dim(test.data)==c(20,6)))
# Creates all possible combinations of attributes
# attribute.combinations is a list whose elements are lists of attributes
attribute.names <- colnames(iris)[1:4]
attribute.combinations <- do.call(
c,
lapply(1:4, function(i) as.list(data.frame(combn(attribute.names, i))))
)
names(attribute.combinations) <- 1:length(attribute.combinations)
return.predictions <- function(attribute.names, training.data, test.data) {
# Format training and test data (as matrices)
### your code here
X.train = as.matrix(training.data[,attribute.names])
X.test = as.matrix(test.data[,attribute.names])
X.train = cbind(matrix(1,nrow(X.train)), X.train)
X.test = cbind(matrix(1,nrow(X.test)), X.test)
y.train = as.matrix(training.data[,"Output"])
# Calculate optimal weights
### your code here
params = inv(t(X.train)%*%X.train)%*%t(X.train)%*%y.train
# Make predictions
### your code here
predictions = X.test %*% params
predictions
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
print(paste("For params: ",att,"\n MSE: ",
return.mse(return.predictions(att, training.data,test.data),
test.data)))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
print("For params: ",att,"\n MSE: \t",
return.mse(return.predictions(att, training.data,test.data),
test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
sprintf("Optimisation with attributes: %s gives MSE of %s", att,
return.mse(return.predictions(att, training.data,test.data), test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print(sprintf("Optimisation with attributes: %s gives MSE of %s", att,
return.mse(return.predictions(att, training.data,test.data), test.data)))
}
vsprintf
print(att)
print(unlist(att)
)
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print("Attributes: %s gives MSE of %s", att,
return.mse(return.predictions(att, training.data,test.data), test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print("Attributes: ", att, "gives MSE of ",
return.mse(return.predictions(att, training.data,test.data), test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print("Attributes: "+ att+ "gives MSE of "+
return.mse(return.predictions(att, training.data,test.data), test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print(paste("Attributes: ", att, "gives MSE of ",
return.mse(return.predictions(att, training.data,test.data), test.data)))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print(paste("Attributes: ", unlist(att), "gives MSE of ",
return.mse(return.predictions(att, training.data,test.data), test.data)))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print(paste("Attributes: ", unlist(att), "gives MSE of \t",
return.mse(return.predictions(att, training.data,test.data), test.data)))
}
?print
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
print("Attributes: ")
print(att)
print("Gives MSE of",
return.mse(return.predictions(att, training.data,test.data), test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print("Attributes: ")
print(att)
print("Gives MSE of", return.mse(preds, test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print("Gives MSE of", return.mse(preds, test.data))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(paste("Gives MSE of", return.mse(preds, test.data)))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(paste("Gives MSE of", return.mse(preds, test.data)))
print("\n")
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(cat("Gives MSE of", return.mse(preds, test.data),"\n"))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(cat("MSE: ", return.mse(preds, test.data),"\n"))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(cat("MSE: ", return.mse(preds, test.data)))
}
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(paste("MSE: ", return.mse(preds, test.data)))
}
?paste0
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(cat(att, " "))
print(paste("MSE: ", return.mse(preds, test.data)))
}
cat(att)
cat(att[1:3])
cat(att[1:3], sep =" ")
# Calculate the mean square error between some predictions and
# the corresponding testing data
return.mse <- function(predictions, testing.data) {
### your code here
mse = mean((predictions - testing.data[,'Output'])^2)
mse
}
# Calculate the test MSE for each the elements of attribute.combinations
# by calling return.predictions and return.mse
for (att in attribute.combinations){
#print("For params: ",att,"\n MSE: \t",
#return.mse(return.predictions(att, training.data,test.data),
#          test.data))
preds = return.predictions(att, training.data,test.data)
print(att)
print(paste("MSE: ", return.mse(preds, test.data)))
}
